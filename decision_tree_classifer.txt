import pandas as pd
import numpy as np
from math import log2
data={'Outlook':['Rainy','Rainy','Overcast','Sunny','Sunny','Sunny', 'Overcast','Rainy','Rainy','Sunny','Overcast','Overcast','Sunny'],'Temperature':['Hot','Hot','Hot','Mild','Cool','Cool','Cool','Mild','Cool','Mild','Mild','Hot','Mild'],'Humidity':['High','High','High','High','Normal','Normal','Normal','High','Normal','Normal','High','Normal','High'],'Windy':['FALSE','TRUE','FALSE','FALSE','FALSE','TRUE', 'TRUE', 'FALSE', 'FALSE', 'FALSE', 'TRUE', 'FALSE', 'TRUE'],'Play Golf':['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'No']
     }
df=pd.DataFrame(data)
def entropy(target_col):
    elements, counts =np.unique(target_col,return_counts=True)
    entropy=np.sum([(-counts[i]/np.sum(counts))*log2(counts[i]/np.sum(counts)) for i in range (len(elements))])
    return entropy
def info_gain(data, split_attribute_name,target_name="Play Golf"):
    total_entropy=entropy(data[target_name])
    vals,counts=np.np.unique(data[split_attribute_name],return_counts=True)
    weighted_entropy=np.sum([(counts[i]/np.sum(counts))*entropy(data.where(data[split_attribute_name]==vals[i]).dropna()[target_name]) for i in range (len(vals))])
    information_gain= total_entropy-weighted_entropy
    return information_gain
def id3(data,original_data, features,target_attribute_name="Play Golf", parent_node_class=None):
    if len(np.unique(data[target_attribute_name]))<=1:
        return np.unique(data[target_attribute_name])[0]
    elif len(data)==0:
        return np.unique(original_data[target_attribute_name])[np.argmax(np.unique(original_data[target_attribute_name],return_counts=True)[1])]
    elif len(features)==0:
        return parent_node_class
    else:
        parent_node_class=np.unique(data[target_attribute_name])[np.argmax(np.unique(data[target_attribute_name], return_counts=True)[1])]
        item_values=[info_gain(data,feature,target_attribute_name) for feature in features]
        best_feature_index=np.argmax(item_values)
        best_feature=features[best_feature_index]
        tree={best_feature:{}}
        features=[i for i in features if i != best_feature]
        for value in np.unique(data[best_feature]):
            sub_data=data.where(data[best_feature]==value).dropna()
            subtree=id3(sub_data,data,features,target_attribute_name,parent_node_class)
            tree[best_feature][value]=subtree
            return decision_tree
features= ['Outlook','Temperature','Humidity','Windy']
decision_tree=id3(df,df,features)







